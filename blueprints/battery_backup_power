alias: Batterie-Backup dynamisch (konfigurierbar)
description: Dynamische Anpassung des Batterie-Backup-Werts basierend auf Energieprognose
trigger:
  - platform: state
    entity_id:
      - sensor.energy_production_today
      - sensor.energy_production_tomorrow
      - sensor.energy_production_d2
      - sensor.energy_production_d3

variables:
  # Konfiguration
  min_forecast: 5
  max_forecast: 25
  min_backup: 12
  max_backup: 30
  cutoff_hour: 12

  # Sensorwerte
  forecast_today: "{{ states('sensor.energy_production_today') | float(0) }}"
  forecast_tomorrow: "{{ states('sensor.energy_production_tomorrow') | float(0) }}"
  forecast_d2: "{{ states('sensor.energy_production_d2') | float(0) }}"
  forecast_d3: "{{ states('sensor.energy_production_d3') | float(0) }}"
  now_hour: "{{ now().hour }}"

  # Berechnung Backup pro Tag
  backup_today: >
    {% set f = forecast_today %}
    {% if f < min_forecast %}{% set f = min_forecast %}{% elif f > max_forecast %}{% set f = max_forecast %}{% endif %}
    {{ [min_backup, [((max_forecast - f) / (max_forecast - min_forecast) * (max_backup - min_backup) + min_backup) | round(0), max_backup] | min] | max }}

  backup_tomorrow: >
    {% set f = forecast_tomorrow %}
    {% if f < min_forecast %}{% set f = min_forecast %}{% elif f > max_forecast %}{% set f = max_forecast %}{% endif %}
    {{ [min_backup, [((max_forecast - f) / (max_forecast - min_forecast) * (max_backup - min_backup) + min_backup) | round(0), max_backup] | min] | max }}

  backup_d2: >
    {% set f = forecast_d2 %}
    {% if f < min_forecast %}{% set f = min_forecast %}{% elif f > max_forecast %}{% set f = max_forecast %}{% endif %}
    {{ [min_backup, [((max_forecast - f) / (max_forecast - min_forecast) * (max_backup - min_backup) + min_backup) | round(0), max_backup] | min] | max }}

  backup_d3: >
    {% set f = forecast_d3 %}
    {% if f < min_forecast %}{% set f = min_forecast %}{% elif f > max_forecast %}{% set f = max_forecast %}{% endif %}
    {{ [min_backup, [((max_forecast - f) / (max_forecast - min_forecast) * (max_backup - min_backup) + min_backup) | round(0), max_backup] | min] | max }}

  # Durchschnitt berechnen
  backup_total: >
    {% if now_hour < cutoff_hour %}
      {% set total = (backup_today + backup_tomorrow + backup_d2 + backup_d3) / 4 %}
    {% else %}
      {% set total = (backup_tomorrow + backup_d2 + backup_d3) / 3 %}
    {% endif %}
    {{ [min_backup, [total | round(0), max_backup] | min] | max }}

  current_value: "{{ states('number.batterien_backup_power_ladestand') | int(0) }}"

condition:
  - condition: template
    value_template: "{{ backup_total != current_value }}"

action:
  - service: number.set_value
    target:
      entity_id: number.batterien_backup_power_ladestand
    data:
      value: "{{ backup_total }}"
  - service: notify.mobile_app_iphone_16_pro_max_von_dennis
    data:
      title: ðŸ”‹ Batterie-Backup angepasst
      message: >
        Backup Power wurde auf {{ backup_total }}â€¯% gesetzt.
        {% if now_hour < cutoff_hour %}
          Heute: {{ forecast_today }}â€¯kWh,
        {% endif %}
        Morgen: {{ forecast_tomorrow }}â€¯kWh, Ãœbermorgen: {{ forecast_d2 }}â€¯kWh,
        In 3 Tagen: {{ forecast_d3 }}â€¯kWh.
mode: single
