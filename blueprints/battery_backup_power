blueprint:
  name: Batterie-Backup dynamisch mit Prognose
  description: Dynamische Anpassung des Batterie-Backup-Werts basierend auf Energieprognose
  domain: automation
  input:
    entity_today:
      name: Sensor fÃ¼r heutige Prognose
      selector:
        entity:
          domain: sensor
    entity_tomorrow:
      name: Sensor fÃ¼r morgige Prognose
      selector:
        entity:
          domain: sensor
    entity_d2:
      name: Sensor fÃ¼r Ãœbermorgen
      selector:
        entity:
          domain: sensor
    entity_d3:
      name: Sensor fÃ¼r in 3 Tagen
      selector:
        entity:
          domain: sensor
    backup_target:
      name: Backup Power Ziel-EntitÃ¤t
      selector:
        entity:
          domain: number
    notify_service:
      name: Benachrichtigungsdienst
      selector:
        text:
    min_backup:
      name: Minimaler Backup-Wert (%)
      default: 12
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    max_backup:
      name: Maximaler Backup-Wert (%)
      default: 30
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    min_forecast:
      name: Minimaler Prognosewert (kWh)
      default: 5
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "kWh"
    max_forecast:
      name: Maximaler Prognosewert (kWh)
      default: 25
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "kWh"
    cutoff_hour:
      name: Uhrzeit-Schwelle (Stunde)
      default: 12
      selector:
        number:
          min: 0
          max: 23
          unit_of_measurement: "h"

trigger:
  - platform: state
    entity_id:
      - !input entity_today
      - !input entity_tomorrow
      - !input entity_d2
      - !input entity_d3

variables:
  now_hour: "{{ now().hour }}"
  forecast_today: "{{ states(!input entity_today) | float(0) }}"
  forecast_tomorrow: "{{ states(!input entity_tomorrow) | float(0) }}"
  forecast_d2: "{{ states(!input entity_d2) | float(0) }}"
  forecast_d3: "{{ states(!input entity_d3) | float(0) }}"

  backup_today: >
    {% set f = forecast_today %}
    {% set min_f = !input min_forecast %}
    {% set max_f = !input max_forecast %}
    {% set min_b = !input min_backup %}
    {% set max_b = !input max_backup %}
    {% if f < min_f %}{% set f = min_f %}{% elif f > max_f %}{% set f = max_f %}{% endif %}
    {{ [min_b, [((max_f - f) / (max_f - min_f) * (max_b - min_b) + min_b) | round(0), max_b] | min] | max }}

  backup_tomorrow: >
    {% set f = forecast_tomorrow %}
    {% set min_f = !input min_forecast %}
    {% set max_f = !input max_forecast %}
    {% set min_b = !input min_backup %}
    {% set max_b = !input max_backup %}
    {% if f < min_f %}{% set f = min_f %}{% elif f > max_f %}{% set f = max_f %}{% endif %}
    {{ [min_b, [((max_f - f) / (max_f - min_f) * (max_b - min_b) + min_b) | round(0), max_b] | min] | max }}

  backup_d2: >
    {% set f = forecast_d2 %}
    {% set min_f = !input min_forecast %}
    {% set max_f = !input max_forecast %}
    {% set min_b = !input min_backup %}
    {% set max_b = !input max_backup %}
    {% if f < min_f %}{% set f = min_f %}{% elif f > max_f %}{% set f = max_f %}{% endif %}
    {{ [min_b, [((max_f - f) / (max_f - min_f) * (max_b - min_b) + min_b) | round(0), max_b] | min] | max }}

  backup_d3: >
    {% set f = forecast_d3 %}
    {% set min_f = !input min_forecast %}
    {% set max_f = !input max_forecast %}
    {% set min_b = !input min_backup %}
    {% set max_b = !input max_backup %}
    {% if f < min_f %}{% set f = min_f %}{% elif f > max_f %}{% set f = max_f %}{% endif %}
    {{ [min_b, [((max_f - f) / (max_f - min_f) * (max_b - min_b) + min_b) | round(0), max_b] | min] | max }}

  backup_total: >
    {% set cutoff = !input cutoff_hour %}
    {% set min_b = !input min_backup %}
    {% set max_b = !input max_backup %}
    {% if now_hour < cutoff %}
      {% set total = (backup_today + backup_tomorrow + backup_d2 + backup_d3) / 4 %}
    {% else %}
      {% set total = (backup_tomorrow + backup_d2 + backup_d3) / 3 %}
    {% endif %}
    {{ [min_b, [total | round(0), max_b] | min] | max }}

  current_value: "{{ states(!input backup_target) | int(0) }}"

condition:
  - condition: template
    value_template: "{{ backup_total != current_value }}"

action:
  - service: number.set_value
    target:
      entity_id: !input backup_target
    data:
      value: "{{ backup_total }}"
  - service: !input notify_service
    data:
      title: ðŸ”‹ Batterie-Backup angepasst
      message: >
        Backup Power wurde auf {{ backup_total }}â€¯% gesetzt.
        {% if now_hour < (!input cutoff_hour) %}
          Heute: {{ forecast_today }}â€¯kWh,
        {% endif %}
        Morgen: {{ forecast_tomorrow }}â€¯kWh, Ãœbermorgen: {{ forecast_d2 }}â€¯kWh,
        In 3 Tagen: {{ forecast_d3 }}â€¯kWh.
``
